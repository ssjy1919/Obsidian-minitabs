/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS,
  default: () => TabsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/tabsSettingTab.ts
var import_obsidian = require("obsidian");
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  // 显示设置选项卡的内容
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("p", { text: "minitabs" });
    containerEl.createEl("p", { text: "\u590D\u5236\u4EE3\u7801\u5757\u5230\u4F60\u7684\u7B14\u8BB0\u9875\u9762\u3002" });
    const a = containerEl.createEl("a", {
      text: "GitHub\u4ED3\u5E93\uFF1Ahttps://github.com/ssjy1919/Obsidian-minitabs",
      href: "https://github.com/ssjy1919/Obsidian-minitabs"
    });
    a.style.fontSize = "12px";
    a.className = "external-link";
    containerEl.addClass("check-Synchronization-tips");
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "tabs\u4E00\u5171\u56DB\u79CD\u5206\u5272\u7EBF\u5206\u522B\u662F ===\u3001--- \u3001~~~ \u548C @@@ \u3002" });
    containerEl.createEl("p", { text: "\u53EF\u4EE5\u6839\u636E\u4E0D\u540C\u7684\u5206\u5272\u7EBF\u4F7F\u76F8\u4E92\u5D4C\u5957tabs" });
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "\u6309\u94AE\u5728\u4E0A\u9762 \u2191" });
    const pres = containerEl.createEl("pre", { text: "````minitabs\n//\u6309\u94AE\u5728\u4E0A\u9762\ntabs\n//\u6309\u94AE\u540D\u5B57,\u8981\u591A\u5C11\u4E2A\u5199\u591A\u5C11\u4E2A\n`\u6309\u94AE1` `\u6309\u94AE2` `\u53EF\u4EE5\u4E00\u76F4\u5199\u4E0B\u53BB\u2026\u2026` \n===\n\u7B2C\u4E00\u4E2A\u6309\u94AE\u5BF9\u5E94\u7684\u9875\u9762\n===\n\u6309\u94AE\u4E8C\u5BF9\u5E94\u7684\u9875\u9762\n===\n\u6309\u94AE\u4E09\u5BF9\u5E94\u7684\u9875\u9762\n````" });
    pres.style.padding = "10px";
    pres.style.fontSize = "0.7em";
    pres.style.border = "1px solid #000000";
    pres.style.color = "#ff0000";
    const buttons = containerEl.createEl("button", { text: "\u590D\u5236" });
    buttons.addEventListener("click", function() {
      if (pres.textContent !== null) {
        navigator.clipboard.writeText(pres.textContent).then(function() {
          new import_obsidian.Notice("\u590D\u5236\u6210\u529F\uFF01");
        }, function(err) {
          new import_obsidian.Notice("\u590D\u5236\u5931\u8D25: ", err);
        });
      }
    });
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "\u6309\u94AE\u5728\u4E0B\u9762 \u2193" });
    const press = containerEl.createEl("pre", { text: "````minitabs\n//\u6309\u94AE\u5728\u4E0B\u9762\ntabsBottom\n//\u6309\u94AE\u540D\u5B57,\u8981\u591A\u5C11\u4E2A\u5199\u591A\u5C11\u4E2A\n`\u6309\u94AE1` `\u6309\u94AE2` `\u53EF\u4EE5\u4E00\u76F4\u5199\u4E0B\u53BB\u2026\u2026` \n===\n\u7B2C\u4E00\u4E2A\u6309\u94AE\u5BF9\u5E94\u7684\u9875\u9762\n===\n\u6309\u94AE\u4E8C\u5BF9\u5E94\u7684\u9875\u9762\n===\n\u6309\u94AE\u4E09\u5BF9\u5E94\u7684\u9875\u9762\n````" });
    press.style.padding = "10px";
    press.style.fontSize = "0.7em";
    press.style.border = "1px solid #000000";
    press.style.color = "#ff0000";
    const buttonss = containerEl.createEl("button", { text: "\u590D\u5236" });
    buttonss.addEventListener("click", function() {
      if (press.textContent !== null) {
        navigator.clipboard.writeText(press.textContent).then(function() {
          new import_obsidian.Notice("\u590D\u5236\u6210\u529F\uFF01");
        }, function(err) {
          new import_obsidian.Notice("\u590D\u5236\u5931\u8D25: ", err);
        });
      }
    });
    containerEl.createEl("hr");
  }
};

// src/codeBlock/view/tabsCodeView.ts
var import_obsidian2 = require("obsidian");
var TabsCodeView = class {
  constructor(CodeBlockContent, app, plugin, settings, source, el, ctx) {
    this.app = app;
    this.plugin = plugin;
    this.settings = settings;
    this.CodeBlockContent = CodeBlockContent;
    this.source = source;
    this.el = el;
    this.ctx = ctx;
    this.onload();
  }
  async onload() {
    const div = document.createElement("div");
    div.className = "TabsCodeBlock-tabs";
    const elems = [];
    const contend = document.createElement("div");
    const box = document.createElement("div");
    box.className = "TabsCodeBlock TabsCodeBlock-buns";
    contend.style.display = "flex";
    contend.style.flexDirection = "column";
    if (this.CodeBlockContent.split("\n")[1]) {
      const pattern = /`(.*?)`/g;
      let match;
      const buttonNameArry = [];
      while ((match = pattern.exec(this.CodeBlockContent.split("\n")[1])) !== null) {
        buttonNameArry.push(match[1]);
      }
      const pagesLines = [];
      for (let j = 0; j < buttonNameArry.length; j++) {
        elems[j] = document.createElement("button");
        elems[j].textContent = buttonNameArry[j];
        elems[j].className = "TabsCodeBlock-tabs-buttonName";
        if (j === 0)
          elems[j].classList.add("active");
        elems[j].addEventListener("click", () => {
          for (let i = 0; i < elems.length; i++) {
            elems[i].classList.remove("active");
          }
          elems[j].classList.add("active");
          for (let i = 0; i < pagesLines.length; i++) {
            if (i === j) {
              pagesLines[i].style.display = "block";
            } else {
              pagesLines[i].style.display = "none";
            }
          }
        });
        box.appendChild(elems[j]);
      }
      const allLinesAfterFirst = this.CodeBlockContent.split("\n").slice(2).join("\n");
      let separator = "===";
      if (this.CodeBlockContent.split("\n")[2]) {
        if (this.CodeBlockContent.split("\n")[2] == "@@@") {
          separator = "@@@";
        } else if (this.CodeBlockContent.split("\n")[2] == "---") {
          separator = "---";
        } else if (this.CodeBlockContent.split("\n")[2] == "~~~") {
          separator = "~~~";
        }
      }
      const regex = new RegExp(`\\s*${separator}\\s*`);
      const paragraphs = allLinesAfterFirst.split(regex);
      for (let i = 0; i < paragraphs.length; i++) {
        if (i >= 1) {
          const pagesLine = document.createElement("div");
          if (i >= 2) {
            pagesLine.style.display = "none";
          }
          pagesLine.className = "TabsCodeBlock-tabs-pages";
          await import_obsidian2.MarkdownRenderer.render(this.app, paragraphs[i], pagesLine, this.ctx.sourcePath, this.plugin);
          contend.appendChild(pagesLine);
          pagesLines.push(pagesLine);
        }
      }
      div.appendChild(box);
    }
    div.appendChild(contend);
    this.el.appendChild(div);
  }
};

// src/codeBlock/view/tabsBottomCodeView.ts
var import_obsidian3 = require("obsidian");
var TabsBottomCodeView = class {
  constructor(CodeBlockContent, app, plugin, settings, source, el, ctx) {
    this.app = app;
    this.plugin = plugin;
    this.settings = settings;
    this.CodeBlockContent = CodeBlockContent;
    this.source = source;
    this.el = el;
    this.ctx = ctx;
    this.onload();
  }
  async onload() {
    const div = document.createElement("div");
    div.className = "TabsCodeBlock-tabs";
    const elems = [];
    const contend = document.createElement("div");
    const box = document.createElement("div");
    box.className = "TabsCodeBlock TabsCodeBlock-buns";
    contend.style.display = "flex";
    contend.style.flexDirection = "column";
    if (this.CodeBlockContent.split("\n")[1]) {
      const pattern = /`(.*?)`/g;
      let match;
      const buttonNameArry = [];
      while ((match = pattern.exec(this.CodeBlockContent.split("\n")[1])) !== null) {
        buttonNameArry.push(match[1]);
      }
      const pagesLines = [];
      for (let j = 0; j < buttonNameArry.length; j++) {
        elems[j] = document.createElement("button");
        elems[j].textContent = buttonNameArry[j];
        elems[j].className = "TabsCodeBlock-tabs-buttonName";
        if (j === 0)
          elems[j].classList.add("active");
        elems[j].addEventListener("click", () => {
          for (let i = 0; i < elems.length; i++) {
            elems[i].classList.remove("active");
          }
          elems[j].classList.add("active");
          for (let i = 0; i < pagesLines.length; i++) {
            if (i === j) {
              pagesLines[i].style.display = "block";
            } else {
              pagesLines[i].style.display = "none";
            }
          }
        });
        box.appendChild(elems[j]);
      }
      const allLinesAfterFirst = this.CodeBlockContent.split("\n").slice(2).join("\n");
      let separator = "===";
      if (this.CodeBlockContent.split("\n")[2]) {
        if (this.CodeBlockContent.split("\n")[2] == "@@@") {
          separator = "@@@";
        } else if (this.CodeBlockContent.split("\n")[2] == "---") {
          separator = "---";
        } else if (this.CodeBlockContent.split("\n")[2] == "~~~") {
          separator = "~~~";
        }
      }
      const regex = new RegExp(`\\s*${separator}\\s*`);
      const paragraphs = allLinesAfterFirst.split(regex);
      for (let i = 0; i < paragraphs.length; i++) {
        if (i >= 1) {
          const pagesLine = document.createElement("div");
          if (i >= 2) {
            pagesLine.style.display = "none";
          }
          pagesLine.className = "TabsCodeBlock-tabs-pages";
          await import_obsidian3.MarkdownRenderer.render(this.app, paragraphs[i], pagesLine, this.ctx.sourcePath, this.plugin);
          contend.appendChild(pagesLine);
          pagesLines.push(pagesLine);
        }
      }
      div.appendChild(contend);
    }
    div.appendChild(box);
    this.el.appendChild(div);
  }
};

// src/codeBlock/codeFenceProcessor.ts
var CodeFenceProcessor = class {
  constructor(app, plugin, settings) {
    this.app = app;
    this.plugin = plugin;
    this.settings = settings;
    this.loadSettings();
    this.plugin.registerMarkdownCodeBlockProcessor("minitabs", this.TabsCodeBlockProcessor.bind(this));
  }
  async TabsCodeBlockProcessor(source, el, ctx) {
    const CodeBlockContentResult = source.trim();
    const lines = CodeBlockContentResult.split("\n");
    const CodeBlockContent = lines.filter((line) => {
      const trimmedLine = line.trim();
      return !trimmedLine.startsWith("//") && trimmedLine.length > 0;
    }).join("\n");
    if (CodeBlockContent.split("\n")[0].trim() === "tabs") {
      new TabsCodeView(CodeBlockContent, this.app, this.plugin, this.settings, source, el, ctx);
    }
    if (CodeBlockContent.split("\n")[0].trim() === "tabsBottom") {
      new TabsBottomCodeView(CodeBlockContent, this.app, this.plugin, this.settings, source, el, ctx);
    }
  }
  // 加载已保存的文件信息
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.plugin.loadData());
  }
  //保存用户在插件的设置页面调整的信息。
  async saveSettings() {
    await this.plugin.saveData(this.settings);
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  markTime: "1970-01-01 00:00:00"
};
var TabsPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingTab(this.app, this));
    new CodeFenceProcessor(this.app, this, this.settings);
    this.registerDomEvent(document, "click", (evt) => {
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,
