/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  DEFAULT_SETTINGS: () => DEFAULT_SETTINGS,
  default: () => TabsPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/tabsSettingTab.ts
var import_obsidian = require("obsidian");
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  // 显示设置选项卡的内容
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("p", { text: "minitabs" });
    const aa = containerEl.createEl("a", {
      text: "\u66F4\u591A\u77E5\u8BC6\u7BA1\u7406\u8BBF\u95EE Obsidian \u4E2D\u6587\u7F51\uFF1Ahttps://Obsidian.vip",
      href: "https://Obsidian.vip"
    });
    aa.style.fontSize = "12px";
    containerEl.createEl("p", { text: "\u4F7F\u7528\u65B9\u6CD5\uFF1A\u590D\u5236\u4EE3\u7801\u5757\u5230\u4F60\u7684\u7B14\u8BB0\u9875\u9762\u3002" });
    containerEl.addClass("check-Synchronization-tips");
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "tabs\u4E00\u5171\u56DB\u79CD\u5206\u5272\u7EBF\u5206\u522B\u662F ===\u3001--- \u3001~~~ \u548C @@@ \u3002" });
    containerEl.createEl("p", { text: "\u53EF\u4EE5\u6839\u636E\u4E0D\u540C\u7684\u5206\u5272\u7EBF\u4F7F\u76F8\u4E92\u5D4C\u5957tabs" });
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "\u6309\u94AE\u5728\u4E0A\u9762 \u2191" });
    const pres = containerEl.createEl("pre", { text: "````minitabs\n//\u6309\u94AE\u5728\u4E0A\u9762\ntabs\n//\u6309\u94AE\u540D\u5B57,\u8981\u591A\u5C11\u4E2A\u5199\u591A\u5C11\u4E2A\n`\u6309\u94AE1` `\u6309\u94AE2` `\u53EF\u4EE5\u4E00\u76F4\u5199\u4E0B\u53BB\u2026\u2026` \n===\n\u7B2C\u4E00\u4E2A\u6309\u94AE\u5BF9\u5E94\u7684\u9875\u9762\n===\n\u6309\u94AE\u4E8C\u5BF9\u5E94\u7684\u9875\u9762\n===\n\u6309\u94AE\u4E09\u5BF9\u5E94\u7684\u9875\u9762\n````" });
    pres.style.padding = "10px";
    pres.style.fontSize = "0.7em";
    pres.style.border = "1px solid #000000";
    pres.style.color = "#ff0000";
    const buttons = containerEl.createEl("button", { text: "\u590D\u5236" });
    buttons.addEventListener("click", function() {
      if (pres.textContent !== null) {
        navigator.clipboard.writeText(pres.textContent).then(function() {
          new import_obsidian.Notice("\u590D\u5236\u6210\u529F\uFF01");
        }, function(err) {
          new import_obsidian.Notice("\u590D\u5236\u5931\u8D25: ", err);
        });
      }
    });
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "\u6309\u94AE\u5728\u4E0B\u9762 \u2193" });
    const press = containerEl.createEl("pre", { text: "````minitabs\n//\u6309\u94AE\u5728\u4E0B\u9762\ntabsBottom\n//\u6309\u94AE\u540D\u5B57,\u8981\u591A\u5C11\u4E2A\u5199\u591A\u5C11\u4E2A\n`\u6309\u94AE1` `\u6309\u94AE2` `\u53EF\u4EE5\u4E00\u76F4\u5199\u4E0B\u53BB\u2026\u2026` \n===\n\u7B2C\u4E00\u4E2A\u6309\u94AE\u5BF9\u5E94\u7684\u9875\u9762\n===\n\u6309\u94AE\u4E8C\u5BF9\u5E94\u7684\u9875\u9762\n===\n\u6309\u94AE\u4E09\u5BF9\u5E94\u7684\u9875\u9762\n````" });
    press.style.padding = "10px";
    press.style.fontSize = "0.7em";
    press.style.border = "1px solid #000000";
    press.style.color = "#ff0000";
    const buttonss = containerEl.createEl("button", { text: "\u590D\u5236" });
    buttonss.addEventListener("click", function() {
      if (press.textContent !== null) {
        navigator.clipboard.writeText(press.textContent).then(function() {
          new import_obsidian.Notice("\u590D\u5236\u6210\u529F\uFF01");
        }, function(err) {
          new import_obsidian.Notice("\u590D\u5236\u5931\u8D25: ", err);
        });
      }
    });
    containerEl.createEl("hr");
    containerEl.createEl("h3", { text: "\u56DB\u8C61\u9650" });
    const pressf = containerEl.createEl("pre", { text: "````minitabs\nfourQuadrant\n---\n### \u4E0D\u7D27\u6025\u4F46\u91CD\u8981\u2B50\u2B50\u2B50\n- [ ] \u5446\u5446\n---\n### \u7D27\u6025\u4E14\u91CD\u8981\u2B50\u2B50\u2B50\u2B50\n- [ ] \u5446\u5446\n---\n### \u4E0D\u7D27\u6025\u4E0D\u91CD\u8981\u2B50\n- [ ] \u5446\u5446\n---\n### \u7D27\u6025\u4E0D\u91CD\u8981\u2B50\u2B50\n- [ ] \u5446\u5446\n````" });
    pressf.style.padding = "10px";
    pressf.style.fontSize = "0.7em";
    pressf.style.border = "1px solid #000000";
    pressf.style.color = "#ff0000";
    const buttonssf = containerEl.createEl("button", { text: "\u590D\u5236" });
    buttonssf.addEventListener("click", function() {
      if (pressf.textContent !== null) {
        navigator.clipboard.writeText(pressf.textContent).then(function() {
          new import_obsidian.Notice("\u590D\u5236\u6210\u529F\uFF01");
        }, function(err) {
          new import_obsidian.Notice("\u590D\u5236\u5931\u8D25: ", err);
        });
      }
    });
    containerEl.createEl("hr");
    const a = containerEl.createEl("a", {
      text: "\u8BBF\u95EE\u6B64\u63D2\u4EF6\u7684GitHub\u4ED3\u5E93\uFF1Ahttps://github.com/ssjy1919/Obsidian-minitabs",
      href: "https://github.com/ssjy1919/Obsidian-minitabs"
    });
    a.style.fontSize = "12px";
  }
};

// src/codeBlock/view/tabsCodeView.ts
var import_obsidian2 = require("obsidian");
var TabsCodeView = class {
  constructor(CodeBlockContent, app, plugin, settings, source, el, ctx) {
    this.app = app;
    this.plugin = plugin;
    this.settings = settings;
    this.CodeBlockContent = CodeBlockContent;
    this.source = source;
    this.el = el;
    this.ctx = ctx;
    this.onload();
  }
  async onload() {
    const div = document.createElement("div");
    div.className = "TabsCodeBlock-tabs";
    const elems = [];
    const contend = document.createElement("div");
    const box = document.createElement("div");
    box.className = "TabsCodeBlock TabsCodeBlock-buns";
    contend.style.display = "flex";
    contend.style.flexDirection = "column";
    if (this.CodeBlockContent.split("\n")[1]) {
      const pattern = /`(.*?)`/g;
      let match;
      const buttonNameArry = [];
      while ((match = pattern.exec(this.CodeBlockContent.split("\n")[1])) !== null) {
        buttonNameArry.push(match[1]);
      }
      const pagesLines = [];
      for (let j = 0; j < buttonNameArry.length; j++) {
        elems[j] = document.createElement("button");
        elems[j].textContent = buttonNameArry[j];
        elems[j].className = "TabsCodeBlock-tabs-buttonName";
        if (j === 0)
          elems[j].classList.add("active");
        elems[j].addEventListener("click", () => {
          for (let i = 0; i < elems.length; i++) {
            elems[i].classList.remove("active");
          }
          elems[j].classList.add("active");
          for (let i = 0; i < pagesLines.length; i++) {
            if (i === j) {
              pagesLines[i].style.display = "block";
            } else {
              pagesLines[i].style.display = "none";
            }
          }
        });
        box.appendChild(elems[j]);
      }
      const allLinesAfterFirst = this.CodeBlockContent.split("\n").slice(2).join("\n");
      let separator = "===";
      if (this.CodeBlockContent.split("\n")[2]) {
        if (this.CodeBlockContent.split("\n")[2] == "@@@") {
          separator = "@@@";
        } else if (this.CodeBlockContent.split("\n")[2] == "---") {
          separator = "---";
        } else if (this.CodeBlockContent.split("\n")[2] == "~~~") {
          separator = "~~~";
        }
      }
      const regex = new RegExp(`\\s*${separator}\\s*`);
      const paragraphs = allLinesAfterFirst.split(regex);
      for (let i = 0; i < paragraphs.length; i++) {
        if (i >= 1) {
          const pagesLine = document.createElement("div");
          if (i >= 2) {
            pagesLine.style.display = "none";
          }
          pagesLine.className = "TabsCodeBlock-tabs-pages";
          await import_obsidian2.MarkdownRenderer.render(this.app, paragraphs[i], pagesLine, this.ctx.sourcePath, this.plugin);
          contend.appendChild(pagesLine);
          pagesLines.push(pagesLine);
        }
      }
      div.appendChild(box);
    }
    div.appendChild(contend);
    this.el.appendChild(div);
  }
};

// src/codeBlock/view/tabsBottomCodeView.ts
var import_obsidian3 = require("obsidian");
var TabsBottomCodeView = class {
  constructor(CodeBlockContent, app, plugin, settings, source, el, ctx) {
    this.app = app;
    this.plugin = plugin;
    this.settings = settings;
    this.CodeBlockContent = CodeBlockContent;
    this.source = source;
    this.el = el;
    this.ctx = ctx;
    this.onload();
  }
  async onload() {
    const div = document.createElement("div");
    div.className = "TabsCodeBlock-tabs";
    const elems = [];
    const contend = document.createElement("div");
    const box = document.createElement("div");
    box.className = "TabsCodeBlock TabsCodeBlock-buns";
    contend.style.display = "flex";
    contend.style.flexDirection = "column";
    if (this.CodeBlockContent.split("\n")[1]) {
      const pattern = /`(.*?)`/g;
      let match;
      const buttonNameArry = [];
      while ((match = pattern.exec(this.CodeBlockContent.split("\n")[1])) !== null) {
        buttonNameArry.push(match[1]);
      }
      const pagesLines = [];
      for (let j = 0; j < buttonNameArry.length; j++) {
        elems[j] = document.createElement("button");
        elems[j].textContent = buttonNameArry[j];
        elems[j].className = "TabsCodeBlock-tabs-buttonName";
        if (j === 0)
          elems[j].classList.add("active");
        elems[j].addEventListener("click", () => {
          for (let i = 0; i < elems.length; i++) {
            elems[i].classList.remove("active");
          }
          elems[j].classList.add("active");
          for (let i = 0; i < pagesLines.length; i++) {
            if (i === j) {
              pagesLines[i].style.display = "block";
            } else {
              pagesLines[i].style.display = "none";
            }
          }
        });
        box.appendChild(elems[j]);
      }
      const allLinesAfterFirst = this.CodeBlockContent.split("\n").slice(2).join("\n");
      let separator = "===";
      if (this.CodeBlockContent.split("\n")[2]) {
        if (this.CodeBlockContent.split("\n")[2] == "@@@") {
          separator = "@@@";
        } else if (this.CodeBlockContent.split("\n")[2] == "---") {
          separator = "---";
        } else if (this.CodeBlockContent.split("\n")[2] == "~~~") {
          separator = "~~~";
        }
      }
      const regex = new RegExp(`\\s*${separator}\\s*`);
      const paragraphs = allLinesAfterFirst.split(regex);
      for (let i = 0; i < paragraphs.length; i++) {
        if (i >= 1) {
          const pagesLine = document.createElement("div");
          if (i >= 2) {
            pagesLine.style.display = "none";
          }
          pagesLine.className = "TabsCodeBlock-tabs-pages";
          await import_obsidian3.MarkdownRenderer.render(this.app, paragraphs[i], pagesLine, this.ctx.sourcePath, this.plugin);
          contend.appendChild(pagesLine);
          pagesLines.push(pagesLine);
        }
      }
      div.appendChild(contend);
    }
    div.appendChild(box);
    this.el.appendChild(div);
  }
};

// src/codeBlock/view/fourQuadrantCodeView.ts
var import_obsidian4 = require("obsidian");
var FourQuadrantCodeView = class {
  constructor(CodeBlockContent, app, plugin, settings, source, el, ctx) {
    this.app = app;
    this.plugin = plugin;
    this.settings = settings;
    this.CodeBlockContent = CodeBlockContent;
    this.source = source;
    this.el = el;
    this.ctx = ctx;
    this.onload();
  }
  async onload() {
    const div = document.createElement("div");
    div.className = "fourQuadrant";
    if (this.CodeBlockContent.split("\n")[1]) {
      const allLinesAfterFirst = this.CodeBlockContent.split("\n").slice(2).join("\n");
      let separator = "===";
      if (this.CodeBlockContent.split("\n")[1]) {
        if (this.CodeBlockContent.split("\n")[1] == "@@@") {
          separator = "@@@";
        } else if (this.CodeBlockContent.split("\n")[1] == "---") {
          separator = "---";
        } else if (this.CodeBlockContent.split("\n")[1] == "~~~") {
          separator = "~~~";
        }
      }
      const regex = new RegExp(`\\s*${separator}\\s*`);
      const paragraphs = allLinesAfterFirst.split(regex);
      for (let i = 0; i < paragraphs.length; i++) {
        const pagesLine = document.createElement("div");
        pagesLine.className = "fourQuadrant-pages";
        await import_obsidian4.MarkdownRenderer.render(this.app, paragraphs[i], pagesLine, this.ctx.sourcePath, this.plugin);
        div.appendChild(pagesLine);
      }
    }
    this.el.appendChild(div);
  }
};

// src/codeBlock/codeFenceProcessor.ts
var CodeFenceProcessor = class {
  constructor(app, plugin, settings) {
    this.app = app;
    this.plugin = plugin;
    this.settings = settings;
    this.loadSettings();
    this.plugin.registerMarkdownCodeBlockProcessor("minitabs", this.TabsCodeBlockProcessor.bind(this));
  }
  async TabsCodeBlockProcessor(source, el, ctx) {
    const CodeBlockContentResult = source.trim();
    const lines = CodeBlockContentResult.split("\n");
    const CodeBlockContent = lines.filter((line) => {
      const trimmedLine = line.trim();
      return !trimmedLine.startsWith("//");
    }).join("\n");
    if (CodeBlockContent.split("\n")[0].trim() === "tabs") {
      new TabsCodeView(CodeBlockContent, this.app, this.plugin, this.settings, source, el, ctx);
    }
    if (CodeBlockContent.split("\n")[0].trim() === "tabsBottom") {
      new TabsBottomCodeView(CodeBlockContent, this.app, this.plugin, this.settings, source, el, ctx);
    }
    if (CodeBlockContent.split("\n")[0].trim() === "fourQuadrant") {
      new FourQuadrantCodeView(CodeBlockContent, this.app, this.plugin, this.settings, source, el, ctx);
    }
  }
  // 加载已保存的文件信息
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.plugin.loadData());
  }
  //保存用户在插件的设置页面调整的信息。
  async saveSettings() {
    await this.plugin.saveData(this.settings);
  }
};

// src/main.ts
var DEFAULT_SETTINGS = {
  markTime: "1970-01-01 00:00:00"
};
var TabsPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    this.addSettingTab(new SettingTab(this.app, this));
    new CodeFenceProcessor(this.app, this, this.settings);
    this.registerDomEvent(document, "click", (evt) => {
    });
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiLCAic3JjL3RhYnNTZXR0aW5nVGFiLnRzIiwgInNyYy9jb2RlQmxvY2svdmlldy90YWJzQ29kZVZpZXcudHMiLCAic3JjL2NvZGVCbG9jay92aWV3L3RhYnNCb3R0b21Db2RlVmlldy50cyIsICJzcmMvY29kZUJsb2NrL3ZpZXcvZm91clF1YWRyYW50Q29kZVZpZXcudHMiLCAic3JjL2NvZGVCbG9jay9jb2RlRmVuY2VQcm9jZXNzb3IudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIlxyXG5pbXBvcnQgeyBQbHVnaW4gfSBmcm9tICdvYnNpZGlhbic7XHJcbmltcG9ydCB7IFNldHRpbmdUYWIgfSBmcm9tICcuL3RhYnNTZXR0aW5nVGFiJztcclxuaW1wb3J0IHsgQ29kZUZlbmNlUHJvY2Vzc29yIH0gZnJvbSAnLi9jb2RlQmxvY2svY29kZUZlbmNlUHJvY2Vzc29yJztcclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRhYnNTZXR0aW5ncyB7XHJcblx0bWFya1RpbWU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfU0VUVElOR1M6IFRhYnNTZXR0aW5ncyA9IHtcclxuXHRtYXJrVGltZTogJzE5NzAtMDEtMDEgMDA6MDA6MDAnLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGFic1BsdWdpbiBleHRlbmRzIFBsdWdpbiB7XHJcblx0c2V0dGluZ3M6IFRhYnNTZXR0aW5ncztcclxuXHRhc3luYyBvbmxvYWQoKSB7XHJcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xyXG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBTZXR0aW5nVGFiKHRoaXMuYXBwLCB0aGlzKSk7XHJcblxyXG5cdFx0bmV3IENvZGVGZW5jZVByb2Nlc3Nvcih0aGlzLmFwcCwgdGhpcywgdGhpcy5zZXR0aW5ncyk7XHJcblx0XHR0aGlzLnJlZ2lzdGVyRG9tRXZlbnQoZG9jdW1lbnQsICdjbGljaycsIChldnQ6IE1vdXNlRXZlbnQpID0+IHtcclxuXHRcdFx0Ly8gY29uc29sZS5sb2coJ2NsaWNrJywgZXZ0KTtcclxuXHRcdH0pO1xyXG5cdFx0XHJcblx0fVxyXG5cdG9udW5sb2FkKCkge1xyXG5cclxuXHR9XHJcblx0YXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XHJcblx0fVxyXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcclxuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcblx0fVxyXG59IiwgIlxyXG5pbXBvcnQgeyBBcHAsIE5vdGljZSwgUGx1Z2luU2V0dGluZ1RhYiB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgdGFic0NvZGVCbG9jayBmcm9tIFwiLi9tYWluXCI7XHJcblxyXG4vLyBcdTVCOUFcdTRFNDlcdThCQkVcdTdGNkVcdTkwMDlcdTk4NzlcdTUzNjFcdTdDN0JcdUZGMENcdTdFRTdcdTYyN0ZcdTgxRUEgUGx1Z2luU2V0dGluZ1RhYiBcdTdDN0JcclxuZXhwb3J0IGNsYXNzIFNldHRpbmdUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcclxuICAgIHBsdWdpbjogdGFic0NvZGVCbG9jaztcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiB0YWJzQ29kZUJsb2NrKSB7XHJcbiAgICAgICAgc3VwZXIoYXBwLCBwbHVnaW4pO1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgfVxyXG5cclxuXHJcblxyXG4gICAgLy8gXHU2NjNFXHU3OTNBXHU4QkJFXHU3RjZFXHU5MDA5XHU5ODc5XHU1MzYxXHU3Njg0XHU1MTg1XHU1QkI5XHJcbiAgICBkaXNwbGF5KCk6IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XHJcbiAgICAgICAgY29udGFpbmVyRWwuZW1wdHkoKTtcclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbChcInBcIiwgeyB0ZXh0OiBcIm1pbml0YWJzXCIgfSk7XHJcbiAgICAgICAgY29uc3QgYWEgPSBjb250YWluZXJFbC5jcmVhdGVFbChcImFcIiwge1xyXG4gICAgICAgICAgICB0ZXh0OiBcIlx1NjZGNFx1NTkxQVx1NzdFNVx1OEJDNlx1N0JBMVx1NzQwNlx1OEJCRlx1OTVFRSBPYnNpZGlhbiBcdTRFMkRcdTY1ODdcdTdGNTFcdUZGMUFodHRwczovL09ic2lkaWFuLnZpcFwiLFxyXG4gICAgICAgICAgICBocmVmOiBcImh0dHBzOi8vT2JzaWRpYW4udmlwXCJcclxuICAgICAgICB9KTtcclxuICAgICAgICBhYS5zdHlsZS5mb250U2l6ZSA9IFwiMTJweFwiO1xyXG5cclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbChcInBcIiwgeyB0ZXh0OiBcIlx1NEY3Rlx1NzUyOFx1NjVCOVx1NkNENVx1RkYxQVx1NTkwRFx1NTIzNlx1NEVFM1x1NzgwMVx1NTc1N1x1NTIzMFx1NEY2MFx1NzY4NFx1N0IxNFx1OEJCMFx1OTg3NVx1OTc2Mlx1MzAwMlwiIH0pO1xyXG5cclxuICAgICAgICAvLyBcdTRFM0FIVE1MXHU2REZCXHU1MkEwXHU0RTAwXHU0RTJBXHU4MUVBXHU1QjlBXHU0RTQ5XHU3QzdCXHU1NDBEIFx1NjVCOVx1NEZCRlx1NUJGOUhUTUxcdThGREJcdTg4NENcdTk4OURcdTU5MTZcdTY0Q0RcdTRGNUNcdUZGMENcclxuICAgICAgICBjb250YWluZXJFbC5hZGRDbGFzcygnY2hlY2stU3luY2hyb25pemF0aW9uLXRpcHMnKTtcclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImhyXCIpO1xyXG5cclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImgzXCIsIHsgdGV4dDogXCJ0YWJzXHU0RTAwXHU1MTcxXHU1NkRCXHU3OUNEXHU1MjA2XHU1MjcyXHU3RUJGXHU1MjA2XHU1MjJCXHU2NjJGID09PVx1MzAwMS0tLSBcdTMwMDF+fn4gXHU1NDhDIEBAQCBcdTMwMDJcIiB9KTtcclxuICAgICAgICBcclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbChcInBcIiwgeyB0ZXh0OiBcIlx1NTNFRlx1NEVFNVx1NjgzOVx1NjM2RVx1NEUwRFx1NTQwQ1x1NzY4NFx1NTIwNlx1NTI3Mlx1N0VCRlx1NEY3Rlx1NzZGOFx1NEU5Mlx1NUQ0Q1x1NTk1N3RhYnNcIiB9KTtcclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImhyXCIpO1xyXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaDNcIiwgeyB0ZXh0OiBcIlx1NjMwOVx1OTRBRVx1NTcyOFx1NEUwQVx1OTc2MiBcdTIxOTFcIiB9KTtcclxuICAgICAgICBjb25zdCBwcmVzID0gY29udGFpbmVyRWwuY3JlYXRlRWwoXCJwcmVcIiwgeyB0ZXh0OiAnYGBgYG1pbml0YWJzXFxuLy9cdTYzMDlcdTk0QUVcdTU3MjhcdTRFMEFcdTk3NjJcXG50YWJzXFxuLy9cdTYzMDlcdTk0QUVcdTU0MERcdTVCNTcsXHU4OTgxXHU1OTFBXHU1QzExXHU0RTJBXHU1MTk5XHU1OTFBXHU1QzExXHU0RTJBXFxuYFx1NjMwOVx1OTRBRTFgIGBcdTYzMDlcdTk0QUUyYCBgXHU1M0VGXHU0RUU1XHU0RTAwXHU3NkY0XHU1MTk5XHU0RTBCXHU1M0JCXHUyMDI2XHUyMDI2YCBcXG49PT1cXG5cdTdCMkNcdTRFMDBcdTRFMkFcdTYzMDlcdTk0QUVcdTVCRjlcdTVFOTRcdTc2ODRcdTk4NzVcdTk3NjJcXG49PT1cXG5cdTYzMDlcdTk0QUVcdTRFOENcdTVCRjlcdTVFOTRcdTc2ODRcdTk4NzVcdTk3NjJcXG49PT1cXG5cdTYzMDlcdTk0QUVcdTRFMDlcdTVCRjlcdTVFOTRcdTc2ODRcdTk4NzVcdTk3NjJcXG5gYGBgJyB9KTtcclxuICAgICAgICBwcmVzLnN0eWxlLnBhZGRpbmcgPSAnMTBweCc7XHJcbiAgICAgICAgcHJlcy5zdHlsZS5mb250U2l6ZT1cIjAuN2VtXCJcclxuICAgICAgICBwcmVzLnN0eWxlLmJvcmRlciA9ICcxcHggc29saWQgIzAwMDAwMCc7XHJcbiAgICAgICAgcHJlcy5zdHlsZS5jb2xvciA9ICcjZmYwMDAwJztcclxuICAgICAgICBjb25zdCBidXR0b25zID0gY29udGFpbmVyRWwuY3JlYXRlRWwoXCJidXR0b25cIiwgeyB0ZXh0OiBcIlx1NTkwRFx1NTIzNlwiIH0pO1xyXG4gICAgICAgIGJ1dHRvbnMuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKHByZXMudGV4dENvbnRlbnQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHByZXMudGV4dENvbnRlbnQpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NTkwRFx1NTIzNlx1NjIxMFx1NTI5Rlx1RkYwMScpO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NTkwRFx1NTIzNlx1NTkzMVx1OEQyNTogJywgZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoclwiKTtcclxuICAgICAgICBjb250YWluZXJFbC5jcmVhdGVFbChcImgzXCIsIHsgdGV4dDogXCJcdTYzMDlcdTk0QUVcdTU3MjhcdTRFMEJcdTk3NjIgXHUyMTkzXCIgfSk7XHJcbiAgICAgICAgY29uc3QgcHJlc3MgPSBjb250YWluZXJFbC5jcmVhdGVFbChcInByZVwiLCB7IHRleHQ6ICdgYGBgbWluaXRhYnNcXG4vL1x1NjMwOVx1OTRBRVx1NTcyOFx1NEUwQlx1OTc2MlxcbnRhYnNCb3R0b21cXG4vL1x1NjMwOVx1OTRBRVx1NTQwRFx1NUI1NyxcdTg5ODFcdTU5MUFcdTVDMTFcdTRFMkFcdTUxOTlcdTU5MUFcdTVDMTFcdTRFMkFcXG5gXHU2MzA5XHU5NEFFMWAgYFx1NjMwOVx1OTRBRTJgIGBcdTUzRUZcdTRFRTVcdTRFMDBcdTc2RjRcdTUxOTlcdTRFMEJcdTUzQkJcdTIwMjZcdTIwMjZgIFxcbj09PVxcblx1N0IyQ1x1NEUwMFx1NEUyQVx1NjMwOVx1OTRBRVx1NUJGOVx1NUU5NFx1NzY4NFx1OTg3NVx1OTc2Mlxcbj09PVxcblx1NjMwOVx1OTRBRVx1NEU4Q1x1NUJGOVx1NUU5NFx1NzY4NFx1OTg3NVx1OTc2Mlxcbj09PVxcblx1NjMwOVx1OTRBRVx1NEUwOVx1NUJGOVx1NUU5NFx1NzY4NFx1OTg3NVx1OTc2MlxcbmBgYGAnIH0pO1xyXG4gICAgICAgIHByZXNzLnN0eWxlLnBhZGRpbmcgPSAnMTBweCc7XHJcbiAgICAgICAgcHJlc3Muc3R5bGUuZm9udFNpemU9XCIwLjdlbVwiXHJcbiAgICAgICAgcHJlc3Muc3R5bGUuYm9yZGVyID0gJzFweCBzb2xpZCAjMDAwMDAwJztcclxuICAgICAgICBwcmVzcy5zdHlsZS5jb2xvciA9ICcjZmYwMDAwJztcclxuICAgICAgICBjb25zdCBidXR0b25zcyA9IGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiYnV0dG9uXCIsIHsgdGV4dDogXCJcdTU5MERcdTUyMzZcIiB9KTtcclxuICAgICAgICBidXR0b25zcy5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAocHJlc3MudGV4dENvbnRlbnQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KHByZXNzLnRleHRDb250ZW50KS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTU5MERcdTUyMzZcdTYyMTBcdTUyOUZcdUZGMDEnKTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgTm90aWNlKCdcdTU5MERcdTUyMzZcdTU5MzFcdThEMjU6ICcsIGVycik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGNvbnRhaW5lckVsLmNyZWF0ZUVsKFwiaHJcIik7XHJcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoM1wiLCB7IHRleHQ6IFwiXHU1NkRCXHU4QzYxXHU5NjUwXCIgfSk7XHJcbiAgICAgICAgY29uc3QgcHJlc3NmID0gY29udGFpbmVyRWwuY3JlYXRlRWwoXCJwcmVcIiwgeyB0ZXh0OiAnYGBgYG1pbml0YWJzXFxuZm91clF1YWRyYW50XFxuLS0tXFxuIyMjIFx1NEUwRFx1N0QyN1x1NjAyNVx1NEY0Nlx1OTFDRFx1ODk4MVx1MkI1MFx1MkI1MFx1MkI1MFxcbi0gWyBdIFx1NTQ0Nlx1NTQ0Nlxcbi0tLVxcbiMjIyBcdTdEMjdcdTYwMjVcdTRFMTRcdTkxQ0RcdTg5ODFcdTJCNTBcdTJCNTBcdTJCNTBcdTJCNTBcXG4tIFsgXSBcdTU0NDZcdTU0NDZcXG4tLS1cXG4jIyMgXHU0RTBEXHU3RDI3XHU2MDI1XHU0RTBEXHU5MUNEXHU4OTgxXHUyQjUwXFxuLSBbIF0gXHU1NDQ2XHU1NDQ2XFxuLS0tXFxuIyMjIFx1N0QyN1x1NjAyNVx1NEUwRFx1OTFDRFx1ODk4MVx1MkI1MFx1MkI1MFxcbi0gWyBdIFx1NTQ0Nlx1NTQ0NlxcbmBgYGAnIH0pO1xyXG4gICAgICAgIHByZXNzZi5zdHlsZS5wYWRkaW5nID0gJzEwcHgnO1xyXG4gICAgICAgIHByZXNzZi5zdHlsZS5mb250U2l6ZT1cIjAuN2VtXCJcclxuICAgICAgICBwcmVzc2Yuc3R5bGUuYm9yZGVyID0gJzFweCBzb2xpZCAjMDAwMDAwJztcclxuICAgICAgICBwcmVzc2Yuc3R5bGUuY29sb3IgPSAnI2ZmMDAwMCc7XHJcbiAgICAgICAgY29uc3QgYnV0dG9uc3NmID0gY29udGFpbmVyRWwuY3JlYXRlRWwoXCJidXR0b25cIiwgeyB0ZXh0OiBcIlx1NTkwRFx1NTIzNlwiIH0pO1xyXG4gICAgICAgIGJ1dHRvbnNzZi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAocHJlc3NmLnRleHRDb250ZW50ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBuYXZpZ2F0b3IuY2xpcGJvYXJkLndyaXRlVGV4dChwcmVzc2YudGV4dENvbnRlbnQpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NTkwRFx1NTIzNlx1NjIxMFx1NTI5Rlx1RkYwMScpO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBOb3RpY2UoJ1x1NTkwRFx1NTIzNlx1NTkzMVx1OEQyNTogJywgZXJyKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29udGFpbmVyRWwuY3JlYXRlRWwoXCJoclwiKTtcclxuICAgICAgICBjb25zdCBhID0gY29udGFpbmVyRWwuY3JlYXRlRWwoXCJhXCIsIHtcclxuICAgICAgICAgICAgdGV4dDogXCJcdThCQkZcdTk1RUVcdTZCNjRcdTYzRDJcdTRFRjZcdTc2ODRHaXRIdWJcdTRFRDNcdTVFOTNcdUZGMUFodHRwczovL2dpdGh1Yi5jb20vc3NqeTE5MTkvT2JzaWRpYW4tbWluaXRhYnNcIixcclxuICAgICAgICAgICAgaHJlZjogXCJodHRwczovL2dpdGh1Yi5jb20vc3NqeTE5MTkvT2JzaWRpYW4tbWluaXRhYnNcIlxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGEuc3R5bGUuZm9udFNpemUgPSBcIjEycHhcIjtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbiIsICJpbXBvcnQgeyBBcHAsIE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsIE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IFRhYnNDb2RlQmxvY2ssIHsgVGFic1NldHRpbmdzIH0gZnJvbSBcInNyYy9tYWluXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIFRhYnNDb2RlVmlldyB7XHJcblxyXG4gICAgQ29kZUJsb2NrQ29udGVudDogc3RyaW5nO1xyXG4gICAgcGx1Z2luOiBUYWJzQ29kZUJsb2NrO1xyXG4gICAgYXBwOiBBcHA7XHJcbiAgICBzZXR0aW5nczogVGFic1NldHRpbmdzO1xyXG4gICAgc291cmNlOiBzdHJpbmc7XHJcbiAgICBlbDogSFRNTEVsZW1lbnQ7XHJcbiAgICBjdHg6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQ7XHJcbiAgICBjb25zdHJ1Y3RvcihDb2RlQmxvY2tDb250ZW50OiBzdHJpbmcsIGFwcDogQXBwLCBwbHVnaW46IFRhYnNDb2RlQmxvY2ssIHNldHRpbmdzOiBUYWJzU2V0dGluZ3MsIHNvdXJjZTogc3RyaW5nLCBlbDogSFRNTEVsZW1lbnQsIGN0eDogTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCkge1xyXG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xyXG4gICAgICAgIHRoaXMucGx1Z2luID0gcGx1Z2luO1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcclxuICAgICAgICB0aGlzLkNvZGVCbG9ja0NvbnRlbnQgPSBDb2RlQmxvY2tDb250ZW50O1xyXG4gICAgICAgIHRoaXMuc291cmNlID0gc291cmNlO1xyXG4gICAgICAgIHRoaXMuZWwgPSBlbDtcclxuICAgICAgICB0aGlzLmN0eCA9IGN0eDtcclxuICAgICAgICB0aGlzLm9ubG9hZCgpO1xyXG4gICAgfVxyXG4gICAgYXN5bmMgb25sb2FkKCkge1xyXG4gICAgICAgIGNvbnN0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGRpdi5jbGFzc05hbWUgPSAnVGFic0NvZGVCbG9jay10YWJzJztcclxuICAgICAgICBjb25zdCBlbGVtczogSFRNTEJ1dHRvbkVsZW1lbnRbXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbmQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBjb25zdCBib3ggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBib3guY2xhc3NOYW1lID0gJ1RhYnNDb2RlQmxvY2sgVGFic0NvZGVCbG9jay1idW5zJztcclxuICAgICAgICBjb250ZW5kLnN0eWxlLmRpc3BsYXkgPSAnZmxleCc7XHJcbiAgICAgICAgY29udGVuZC5zdHlsZS5mbGV4RGlyZWN0aW9uID0gJ2NvbHVtbic7XHJcbiAgICAgICAgaWYgKHRoaXMuQ29kZUJsb2NrQ29udGVudC5zcGxpdChcIlxcblwiKVsxXSkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXR0ZXJuID0gL2AoLio/KWAvZztcclxuICAgICAgICAgICAgbGV0IG1hdGNoO1xyXG4gICAgICAgICAgICBjb25zdCBidXR0b25OYW1lQXJyeSA9IFtdO1xyXG4gICAgICAgICAgICB3aGlsZSAoKG1hdGNoID0gcGF0dGVybi5leGVjKHRoaXMuQ29kZUJsb2NrQ29udGVudC5zcGxpdChcIlxcblwiKVsxXSkpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBidXR0b25OYW1lQXJyeS5wdXNoKG1hdGNoWzFdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBwYWdlc0xpbmVzOiBIVE1MRGl2RWxlbWVudFtdID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYnV0dG9uTmFtZUFycnkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGVsZW1zW2pdID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICBlbGVtc1tqXS50ZXh0Q29udGVudCA9IGJ1dHRvbk5hbWVBcnJ5W2pdO1xyXG4gICAgICAgICAgICAgICAgZWxlbXNbal0uY2xhc3NOYW1lID0gJ1RhYnNDb2RlQmxvY2stdGFicy1idXR0b25OYW1lJztcclxuICAgICAgICAgICAgICAgIGlmIChqID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1zW2pdLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gZWxlbXNbal0uc3R5bGUuZmxleEdyb3cgPSAnMSc7XHJcbiAgICAgICAgICAgICAgICAvLyBcdTZERkJcdTUyQTBcdTcwQjlcdTUxRkJcdTRFOEJcdTRFRjZcdTc2RDFcdTU0MkNcdTU2NjhcclxuICAgICAgICAgICAgICAgIGVsZW1zW2pdLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIFx1OTA0RFx1NTM4Nlx1NjI0MFx1NjcwOVx1NzY4NFx1NjMwOVx1OTRBRVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbXNbaV0uY2xhc3NMaXN0LnJlbW92ZShcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbXNbal0uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZ2VzTGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IGopIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhZ2VzTGluZXNbaV0uc3R5bGUuZGlzcGxheSA9ICdibG9jayc7ICAvLyBcdTY2M0VcdTc5M0FcdTVGNTNcdTUyNERcdTc2ODQgcGFnZXNMaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlc0xpbmVzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7ICAvLyBcdTk2OTBcdTg1Q0ZcdTUxNzZcdTRFRDZcdTc2ODQgcGFnZXNMaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGJveC5hcHBlbmRDaGlsZChlbGVtc1tqXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9cdTRGN0ZcdTc1Mjggc2xpY2UoMikgXHU4M0I3XHU1M0Q2XHU3QjJDXHU0RThDXHU4ODRDXHU0RTRCXHU1NDBFXHU3Njg0XHU2MjQwXHU2NzA5XHU4ODRDXHVGRjBDXHU2NzAwXHU1NDBFXHU0RjdGXHU3NTI4IGpvaW4oXCJcXG5cIikgXHU1QzA2XHU4RkQ5XHU0RTlCXHU4ODRDXHU5MUNEXHU2NUIwXHU3RUM0XHU1NDA4XHU2MjEwXHU0RTAwXHU0RTJBXHU1QjU3XHU3QjI2XHU0RTMyXHJcbiAgICAgICAgICAgIGNvbnN0IGFsbExpbmVzQWZ0ZXJGaXJzdCA9IHRoaXMuQ29kZUJsb2NrQ29udGVudC5zcGxpdChcIlxcblwiKS5zbGljZSgyKS5qb2luKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICAvLyBcdTRGN0ZcdTc1MjhcdTZCNjNcdTUyMTlcdTg4NjhcdThGQkVcdTVGMEZcdTUzMzlcdTkxNERcdTc1MzFcdTRFMDBcdTRFMkFcdTYyMTZcdTU5MUFcdTRFMkFcdTYzNjJcdTg4NENcdTdCMjZcdTUyMDZcdTk2OTRcdTc2ODRcdTVCNTdcdTdCMjZcdTRFMzJcclxuICAgICAgICAgICAgLy8gY29uc3QgcGFyYWdyYXBocyA9IGFsbExpbmVzQWZ0ZXJGaXJzdC5zcGxpdCgvXFxuXFxzKlxcbi8pO1xyXG4gICAgICAgICAgICBsZXQgc2VwYXJhdG9yID0gXCI9PT1cIjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuQ29kZUJsb2NrQ29udGVudC5zcGxpdChcIlxcblwiKVsyXSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuQ29kZUJsb2NrQ29udGVudC5zcGxpdChcIlxcblwiKVsyXSA9PSBcIkBAQFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yID0gXCJAQEBcIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5Db2RlQmxvY2tDb250ZW50LnNwbGl0KFwiXFxuXCIpWzJdID09IFwiLS0tXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3IgPSBcIi0tLVwiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLkNvZGVCbG9ja0NvbnRlbnQuc3BsaXQoXCJcXG5cIilbMl0gPT0gXCJ+fn5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcGFyYXRvciA9IFwifn5+XCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGBcXFxccyoke3NlcGFyYXRvcn1cXFxccypgKTtcclxuICAgICAgICAgICAgY29uc3QgcGFyYWdyYXBocyA9IGFsbExpbmVzQWZ0ZXJGaXJzdC5zcGxpdChyZWdleCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYWdyYXBocy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VzTGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID49IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZXNMaW5lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VzTGluZS5jbGFzc05hbWUgPSBcIlRhYnNDb2RlQmxvY2stdGFicy1wYWdlc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXIodGhpcy5hcHAsIHBhcmFncmFwaHNbaV0sIHBhZ2VzTGluZSwgdGhpcy5jdHguc291cmNlUGF0aCwgdGhpcy5wbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbmQuYXBwZW5kQ2hpbGQocGFnZXNMaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlc0xpbmVzLnB1c2gocGFnZXNMaW5lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQoYm94KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKGNvbnRlbmQpO1xyXG5cclxuICAgICAgICB0aGlzLmVsLmFwcGVuZENoaWxkKGRpdik7XHJcblxyXG4gICAgfVxyXG59XHJcbiIsICJpbXBvcnQgeyBBcHAsIE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQsIE1hcmtkb3duUmVuZGVyZXIgfSBmcm9tIFwib2JzaWRpYW5cIjtcclxuaW1wb3J0IFRhYnNDb2RlQmxvY2ssIHsgVGFic1NldHRpbmdzIH0gZnJvbSBcInNyYy9tYWluXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgVGFic0JvdHRvbUNvZGVWaWV3IHtcclxuICAgIENvZGVCbG9ja0NvbnRlbnQ6IHN0cmluZztcclxuICAgIHBsdWdpbjogVGFic0NvZGVCbG9jaztcclxuICAgIGFwcDogQXBwO1xyXG4gICAgc2V0dGluZ3M6IFRhYnNTZXR0aW5ncztcclxuICAgIHNvdXJjZTogc3RyaW5nO1xyXG4gICAgZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgY3R4OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0O1xyXG4gICAgY29uc3RydWN0b3IoQ29kZUJsb2NrQ29udGVudDogc3RyaW5nLCBhcHA6IEFwcCwgcGx1Z2luOiBUYWJzQ29kZUJsb2NrLCBzZXR0aW5nczogVGFic1NldHRpbmdzLCBzb3VyY2U6IHN0cmluZywgZWw6IEhUTUxFbGVtZW50LCBjdHg6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5Db2RlQmxvY2tDb250ZW50ID0gQ29kZUJsb2NrQ29udGVudDtcclxuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcclxuICAgICAgICB0aGlzLmVsID0gZWw7XHJcbiAgICAgICAgdGhpcy5jdHggPSBjdHg7XHJcbiAgICAgICAgdGhpcy5vbmxvYWQoKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9ubG9hZCgpIHtcclxuICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ1RhYnNDb2RlQmxvY2stdGFicyc7XHJcbiAgICAgICAgY29uc3QgZWxlbXM6IEhUTUxCdXR0b25FbGVtZW50W10gPSBbXTtcclxuICAgICAgICBjb25zdCBjb250ZW5kID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgY29uc3QgYm94ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgYm94LmNsYXNzTmFtZSA9ICdUYWJzQ29kZUJsb2NrIFRhYnNDb2RlQmxvY2stYnVucyc7XHJcbiAgICAgICAgY29udGVuZC5zdHlsZS5kaXNwbGF5ID0gJ2ZsZXgnO1xyXG4gICAgICAgIGNvbnRlbmQuc3R5bGUuZmxleERpcmVjdGlvbiA9ICdjb2x1bW4nO1xyXG4gICAgICAgIGlmICh0aGlzLkNvZGVCbG9ja0NvbnRlbnQuc3BsaXQoXCJcXG5cIilbMV0pIHtcclxuICAgICAgICAgICAgY29uc3QgcGF0dGVybiA9IC9gKC4qPylgL2c7XHJcbiAgICAgICAgICAgIGxldCBtYXRjaDtcclxuICAgICAgICAgICAgY29uc3QgYnV0dG9uTmFtZUFycnkgPSBbXTtcclxuICAgICAgICAgICAgd2hpbGUgKChtYXRjaCA9IHBhdHRlcm4uZXhlYyh0aGlzLkNvZGVCbG9ja0NvbnRlbnQuc3BsaXQoXCJcXG5cIilbMV0pKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgYnV0dG9uTmFtZUFycnkucHVzaChtYXRjaFsxXSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgcGFnZXNMaW5lczogSFRNTERpdkVsZW1lbnRbXSA9IFtdOyAgXHJcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYnV0dG9uTmFtZUFycnkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgICAgIGVsZW1zW2pdID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7XHJcbiAgICAgICAgICAgICAgICBlbGVtc1tqXS50ZXh0Q29udGVudCA9IGJ1dHRvbk5hbWVBcnJ5W2pdO1xyXG4gICAgICAgICAgICAgICAgZWxlbXNbal0uY2xhc3NOYW1lID0gJ1RhYnNDb2RlQmxvY2stdGFicy1idXR0b25OYW1lJztcclxuICAgICAgICAgICAgICAgIGlmIChqID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1zW2pdLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICBlbGVtc1tqXS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1zW2ldLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1zW2pdLmNsYXNzTGlzdC5hZGQoXCJhY3RpdmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYWdlc0xpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlc0xpbmVzW2ldLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snOyAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYWdlc0xpbmVzW2ldLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBib3guYXBwZW5kQ2hpbGQoZWxlbXNbal0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGFsbExpbmVzQWZ0ZXJGaXJzdCA9IHRoaXMuQ29kZUJsb2NrQ29udGVudC5zcGxpdChcIlxcblwiKS5zbGljZSgyKS5qb2luKFwiXFxuXCIpO1xyXG4gICAgICAgICAgICBsZXQgc2VwYXJhdG9yID0gXCI9PT1cIjtcclxuICAgICAgICAgICAgaWYgKHRoaXMuQ29kZUJsb2NrQ29udGVudC5zcGxpdChcIlxcblwiKVsyXSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuQ29kZUJsb2NrQ29udGVudC5zcGxpdChcIlxcblwiKVsyXSA9PSBcIkBAQFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yID0gXCJAQEBcIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5Db2RlQmxvY2tDb250ZW50LnNwbGl0KFwiXFxuXCIpWzJdID09IFwiLS0tXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3IgPSBcIi0tLVwiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLkNvZGVCbG9ja0NvbnRlbnQuc3BsaXQoXCJcXG5cIilbMl0gPT0gXCJ+fn5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcGFyYXRvciA9IFwifn5+XCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGBcXFxccyoke3NlcGFyYXRvcn1cXFxccypgKTtcclxuICAgICAgICAgICAgY29uc3QgcGFyYWdyYXBocyA9IGFsbExpbmVzQWZ0ZXJGaXJzdC5zcGxpdChyZWdleCk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFyYWdyYXBocy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2VzTGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID49IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFnZXNMaW5lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VzTGluZS5jbGFzc05hbWUgPSBcIlRhYnNDb2RlQmxvY2stdGFicy1wYWdlc1wiXHJcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgTWFya2Rvd25SZW5kZXJlci5yZW5kZXIodGhpcy5hcHAsIHBhcmFncmFwaHNbaV0sIHBhZ2VzTGluZSwgdGhpcy5jdHguc291cmNlUGF0aCwgdGhpcy5wbHVnaW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbmQuYXBwZW5kQ2hpbGQocGFnZXNMaW5lKTtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlc0xpbmVzLnB1c2gocGFnZXNMaW5lKTsgIC8vIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRpdi5hcHBlbmRDaGlsZChjb250ZW5kKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZGl2LmFwcGVuZENoaWxkKGJveCk7XHJcblxyXG4gICAgICAgIHRoaXMuZWwuYXBwZW5kQ2hpbGQoZGl2KTtcclxuXHJcbiAgICB9XHJcbn0iLCAiaW1wb3J0IHsgQXBwLCBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0LCBNYXJrZG93blJlbmRlcmVyIH0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCBUYWJzQ29kZUJsb2NrLCB7IFRhYnNTZXR0aW5ncyB9IGZyb20gXCJzcmMvbWFpblwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEZvdXJRdWFkcmFudENvZGVWaWV3IHtcclxuICAgIENvZGVCbG9ja0NvbnRlbnQ6IHN0cmluZztcclxuICAgIHBsdWdpbjogVGFic0NvZGVCbG9jaztcclxuICAgIGFwcDogQXBwO1xyXG4gICAgc2V0dGluZ3M6IFRhYnNTZXR0aW5ncztcclxuICAgIHNvdXJjZTogc3RyaW5nO1xyXG4gICAgZWw6IEhUTUxFbGVtZW50O1xyXG4gICAgY3R4OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0O1xyXG4gICAgY29uc3RydWN0b3IoQ29kZUJsb2NrQ29udGVudDogc3RyaW5nLCBhcHA6IEFwcCwgcGx1Z2luOiBUYWJzQ29kZUJsb2NrLCBzZXR0aW5nczogVGFic1NldHRpbmdzLCBzb3VyY2U6IHN0cmluZywgZWw6IEhUTUxFbGVtZW50LCBjdHg6IE1hcmtkb3duUG9zdFByb2Nlc3NvckNvbnRleHQpIHtcclxuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcclxuICAgICAgICB0aGlzLnBsdWdpbiA9IHBsdWdpbjtcclxuICAgICAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XHJcbiAgICAgICAgdGhpcy5Db2RlQmxvY2tDb250ZW50ID0gQ29kZUJsb2NrQ29udGVudDtcclxuICAgICAgICB0aGlzLnNvdXJjZSA9IHNvdXJjZTtcclxuICAgICAgICB0aGlzLmVsID0gZWw7XHJcbiAgICAgICAgdGhpcy5jdHggPSBjdHg7XHJcbiAgICAgICAgdGhpcy5vbmxvYWQoKTtcclxuICAgIH1cclxuICAgIGFzeW5jIG9ubG9hZCgpIHtcclxuICAgICAgICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBkaXYuY2xhc3NOYW1lID0gJ2ZvdXJRdWFkcmFudCc7XHJcbiAgICAgICAgaWYgKHRoaXMuQ29kZUJsb2NrQ29udGVudC5zcGxpdChcIlxcblwiKVsxXSkge1xyXG4gICAgICAgICAgICBjb25zdCBhbGxMaW5lc0FmdGVyRmlyc3QgPSB0aGlzLkNvZGVCbG9ja0NvbnRlbnQuc3BsaXQoXCJcXG5cIikuc2xpY2UoMikuam9pbihcIlxcblwiKTtcclxuICAgICAgICAgICAgbGV0IHNlcGFyYXRvciA9IFwiPT09XCI7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLkNvZGVCbG9ja0NvbnRlbnQuc3BsaXQoXCJcXG5cIilbMV0pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLkNvZGVCbG9ja0NvbnRlbnQuc3BsaXQoXCJcXG5cIilbMV0gPT0gXCJAQEBcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlcGFyYXRvciA9IFwiQEBAXCI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuQ29kZUJsb2NrQ29udGVudC5zcGxpdChcIlxcblwiKVsxXSA9PSBcIi0tLVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VwYXJhdG9yID0gXCItLS1cIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5Db2RlQmxvY2tDb250ZW50LnNwbGl0KFwiXFxuXCIpWzFdID09IFwifn5+XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZXBhcmF0b3IgPSBcIn5+flwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChgXFxcXHMqJHtzZXBhcmF0b3J9XFxcXHMqYCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmFncmFwaHMgPSBhbGxMaW5lc0FmdGVyRmlyc3Quc3BsaXQocmVnZXgpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFncmFwaHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYWdlc0xpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgICAgICAgICBwYWdlc0xpbmUuY2xhc3NOYW1lID0gXCJmb3VyUXVhZHJhbnQtcGFnZXNcIlxyXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IE1hcmtkb3duUmVuZGVyZXIucmVuZGVyKHRoaXMuYXBwLCBwYXJhZ3JhcGhzW2ldLCBwYWdlc0xpbmUsIHRoaXMuY3R4LnNvdXJjZVBhdGgsIHRoaXMucGx1Z2luKTtcclxuICAgICAgICAgICAgICAgICAgICBkaXYuYXBwZW5kQ2hpbGQocGFnZXNMaW5lKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZWwuYXBwZW5kQ2hpbGQoZGl2KTtcclxuXHJcbiAgICB9XHJcbn0iLCAiXHJcbmltcG9ydCB7IEFwcCwgTWFya2Rvd25Qb3N0UHJvY2Vzc29yQ29udGV4dCB9IGZyb20gXCJvYnNpZGlhblwiO1xyXG5pbXBvcnQgVGFic0NvZGVCbG9jaywgeyBERUZBVUxUX1NFVFRJTkdTLCBUYWJzU2V0dGluZ3MgfSBmcm9tIFwiLi4vbWFpblwiO1xyXG5pbXBvcnQgeyBUYWJzQ29kZVZpZXcgfSBmcm9tIFwiLi92aWV3L3RhYnNDb2RlVmlld1wiO1xyXG5pbXBvcnQgeyBUYWJzQm90dG9tQ29kZVZpZXcgfSBmcm9tIFwiLi92aWV3L3RhYnNCb3R0b21Db2RlVmlld1wiO1xyXG5pbXBvcnQgeyBGb3VyUXVhZHJhbnRDb2RlVmlldyB9IGZyb20gXCIuL3ZpZXcvZm91clF1YWRyYW50Q29kZVZpZXdcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBDb2RlRmVuY2VQcm9jZXNzb3Ige1xyXG4gICAgcGx1Z2luOiBUYWJzQ29kZUJsb2NrO1xyXG4gICAgYXBwOiBBcHBcclxuICAgIHNldHRpbmdzOiBUYWJzU2V0dGluZ3M7XHJcbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBUYWJzQ29kZUJsb2NrLCBzZXR0aW5nczogVGFic1NldHRpbmdzKSB7XHJcbiAgICAgICAgdGhpcy5hcHAgPSBhcHA7XHJcbiAgICAgICAgdGhpcy5wbHVnaW4gPSBwbHVnaW47XHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xyXG4gICAgICAgIHRoaXMubG9hZFNldHRpbmdzKClcclxuICAgICAgICB0aGlzLnBsdWdpbi5yZWdpc3Rlck1hcmtkb3duQ29kZUJsb2NrUHJvY2Vzc29yKCdtaW5pdGFicycsIHRoaXMuVGFic0NvZGVCbG9ja1Byb2Nlc3Nvci5iaW5kKHRoaXMpKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgYXN5bmMgVGFic0NvZGVCbG9ja1Byb2Nlc3NvcihcclxuICAgICAgICBzb3VyY2U6IHN0cmluZyxcclxuICAgICAgICBlbDogSFRNTEVsZW1lbnQsXHJcbiAgICAgICAgY3R4OiBNYXJrZG93blBvc3RQcm9jZXNzb3JDb250ZXh0XHJcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcclxuXHJcbiAgICAgICAgLy8gXHU3QjJDXHU0RTAwXHU2QjY1Olx1NTkwNFx1NzQwNidzb3VyY2UnXHVGRjBDXHU4RkQ5XHU2NjJGXHU0RUUzXHU3ODAxXHU1NzU3XHU5MUNDXHU5NzYyXHU3Njg0XHU1QjU3XHU3QjI2XHJcbiAgICAgICAgY29uc3QgQ29kZUJsb2NrQ29udGVudFJlc3VsdCA9IHNvdXJjZS50cmltKCk7XHJcbiAgICAgICAgY29uc3QgbGluZXMgPSBDb2RlQmxvY2tDb250ZW50UmVzdWx0LnNwbGl0KCdcXG4nKTtcclxuICAgICAgICBjb25zdCBDb2RlQmxvY2tDb250ZW50ID0gbGluZXMuZmlsdGVyKGxpbmUgPT4ge1xyXG4gICAgICAgICAgICAvLyBcdTUzQkJcdTk2NjRcdTUyNERcdTU0MEVcdTdBN0FcdTY4M0NcclxuICAgICAgICAgICAgY29uc3QgdHJpbW1lZExpbmUgPSBsaW5lLnRyaW0oKTtcclxuICAgICAgICAgICAgLy8gXHU0RTBEXHU2NjJGXHU0RUU1Jy8vJ1x1NUYwMFx1NTkzNFxyXG4gICAgICAgICAgICByZXR1cm4gIXRyaW1tZWRMaW5lLnN0YXJ0c1dpdGgoJy8vJyk7XHJcbiAgICAgICAgfSkuam9pbignXFxuJyk7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coQ29kZUJsb2NrQ29udGVudCk7XHJcblxyXG4gICAgICAgIC8vXHU0RjdGXHU3NTI4dHJpbSgpXHU1MUZEXHU2NTcwXHU2NzY1XHU3OUZCXHU5NjY0XHU1QjU3XHU3QjI2XHU0RTMyXHU0RTI0XHU3QUVGXHU3Njg0XHU3QTdBXHU2ODNDXHUzMDAyXHJcbiAgICAgICAgaWYgKENvZGVCbG9ja0NvbnRlbnQuc3BsaXQoXCJcXG5cIilbMF0udHJpbSgpID09PSBcInRhYnNcIikge1xyXG4gICAgICAgICAgICBuZXcgVGFic0NvZGVWaWV3KENvZGVCbG9ja0NvbnRlbnQsIHRoaXMuYXBwLCB0aGlzLnBsdWdpbiwgdGhpcy5zZXR0aW5ncywgc291cmNlLCBlbCwgY3R4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKENvZGVCbG9ja0NvbnRlbnQuc3BsaXQoXCJcXG5cIilbMF0udHJpbSgpID09PSBcInRhYnNCb3R0b21cIikge1xyXG4gICAgICAgICAgICBuZXcgVGFic0JvdHRvbUNvZGVWaWV3KENvZGVCbG9ja0NvbnRlbnQsIHRoaXMuYXBwLCB0aGlzLnBsdWdpbiwgdGhpcy5zZXR0aW5ncywgc291cmNlLCBlbCwgY3R4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKENvZGVCbG9ja0NvbnRlbnQuc3BsaXQoXCJcXG5cIilbMF0udHJpbSgpID09PSBcImZvdXJRdWFkcmFudFwiKSB7XHJcbiAgICAgICAgICAgIG5ldyBGb3VyUXVhZHJhbnRDb2RlVmlldyhDb2RlQmxvY2tDb250ZW50LCB0aGlzLmFwcCwgdGhpcy5wbHVnaW4sIHRoaXMuc2V0dGluZ3MsIHNvdXJjZSwgZWwsIGN0eCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFx1NTJBMFx1OEY3RFx1NURGMlx1NEZERFx1NUI1OFx1NzY4NFx1NjU4N1x1NEVGNlx1NEZFMVx1NjA2RlxyXG4gICAgYXN5bmMgbG9hZFNldHRpbmdzKCkge1xyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MgPSBPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1NFVFRJTkdTLCBhd2FpdCB0aGlzLnBsdWdpbi5sb2FkRGF0YSgpKTtcclxuICAgIH1cclxuICAgIC8vXHU0RkREXHU1QjU4XHU3NTI4XHU2MjM3XHU1NzI4XHU2M0QyXHU0RUY2XHU3Njg0XHU4QkJFXHU3RjZFXHU5ODc1XHU5NzYyXHU4QzAzXHU2NTc0XHU3Njg0XHU0RkUxXHU2MDZGXHUzMDAyXHJcbiAgICBhc3luYyBzYXZlU2V0dGluZ3MoKSB7XHJcbiAgICAgICAgYXdhaXQgdGhpcy5wbHVnaW4uc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5cclxuIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQ0EsSUFBQUEsbUJBQXVCOzs7QUNBdkIsc0JBQThDO0FBSXZDLElBQU0sYUFBTixjQUF5QixpQ0FBaUI7QUFBQSxFQUc3QyxZQUFZLEtBQVUsUUFBdUI7QUFDekMsVUFBTSxLQUFLLE1BQU07QUFDakIsU0FBSyxTQUFTO0FBQUEsRUFDbEI7QUFBQTtBQUFBLEVBS0EsVUFBZ0I7QUFDWixVQUFNLEVBQUUsWUFBWSxJQUFJO0FBQ3hCLGdCQUFZLE1BQU07QUFDbEIsZ0JBQVksU0FBUyxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDOUMsVUFBTSxLQUFLLFlBQVksU0FBUyxLQUFLO0FBQUEsTUFDakMsTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLElBQ1YsQ0FBQztBQUNELE9BQUcsTUFBTSxXQUFXO0FBRXBCLGdCQUFZLFNBQVMsS0FBSyxFQUFFLE1BQU0sK0dBQXFCLENBQUM7QUFHeEQsZ0JBQVksU0FBUyw0QkFBNEI7QUFDakQsZ0JBQVksU0FBUyxJQUFJO0FBRXpCLGdCQUFZLFNBQVMsTUFBTSxFQUFFLE1BQU0sNEdBQXNDLENBQUM7QUFFMUUsZ0JBQVksU0FBUyxLQUFLLEVBQUUsTUFBTSxpR0FBc0IsQ0FBQztBQUN6RCxnQkFBWSxTQUFTLElBQUk7QUFDekIsZ0JBQVksU0FBUyxNQUFNLEVBQUUsTUFBTSx3Q0FBVSxDQUFDO0FBQzlDLFVBQU0sT0FBTyxZQUFZLFNBQVMsT0FBTyxFQUFFLE1BQU0sc1pBQThILENBQUM7QUFDaEwsU0FBSyxNQUFNLFVBQVU7QUFDckIsU0FBSyxNQUFNLFdBQVM7QUFDcEIsU0FBSyxNQUFNLFNBQVM7QUFDcEIsU0FBSyxNQUFNLFFBQVE7QUFDbkIsVUFBTSxVQUFVLFlBQVksU0FBUyxVQUFVLEVBQUUsTUFBTSxlQUFLLENBQUM7QUFDN0QsWUFBUSxpQkFBaUIsU0FBUyxXQUFZO0FBQzFDLFVBQUksS0FBSyxnQkFBZ0IsTUFBTTtBQUMzQixrQkFBVSxVQUFVLFVBQVUsS0FBSyxXQUFXLEVBQUUsS0FBSyxXQUFZO0FBQzdELGNBQUksdUJBQU8sZ0NBQU87QUFBQSxRQUN0QixHQUFHLFNBQVUsS0FBSztBQUNkLGNBQUksdUJBQU8sOEJBQVUsR0FBRztBQUFBLFFBQzVCLENBQUM7QUFBQSxNQUNMO0FBQUEsSUFDSixDQUFDO0FBQ0QsZ0JBQVksU0FBUyxJQUFJO0FBQ3pCLGdCQUFZLFNBQVMsTUFBTSxFQUFFLE1BQU0sd0NBQVUsQ0FBQztBQUM5QyxVQUFNLFFBQVEsWUFBWSxTQUFTLE9BQU8sRUFBRSxNQUFNLDRaQUFvSSxDQUFDO0FBQ3ZMLFVBQU0sTUFBTSxVQUFVO0FBQ3RCLFVBQU0sTUFBTSxXQUFTO0FBQ3JCLFVBQU0sTUFBTSxTQUFTO0FBQ3JCLFVBQU0sTUFBTSxRQUFRO0FBQ3BCLFVBQU0sV0FBVyxZQUFZLFNBQVMsVUFBVSxFQUFFLE1BQU0sZUFBSyxDQUFDO0FBQzlELGFBQVMsaUJBQWlCLFNBQVMsV0FBWTtBQUMzQyxVQUFJLE1BQU0sZ0JBQWdCLE1BQU07QUFDNUIsa0JBQVUsVUFBVSxVQUFVLE1BQU0sV0FBVyxFQUFFLEtBQUssV0FBWTtBQUM5RCxjQUFJLHVCQUFPLGdDQUFPO0FBQUEsUUFDdEIsR0FBRyxTQUFVLEtBQUs7QUFDZCxjQUFJLHVCQUFPLDhCQUFVLEdBQUc7QUFBQSxRQUM1QixDQUFDO0FBQUEsTUFDTDtBQUFBLElBQ0osQ0FBQztBQUNELGdCQUFZLFNBQVMsSUFBSTtBQUN6QixnQkFBWSxTQUFTLE1BQU0sRUFBRSxNQUFNLHFCQUFNLENBQUM7QUFDMUMsVUFBTSxTQUFTLFlBQVksU0FBUyxPQUFPLEVBQUUsTUFBTSwrVkFBdUosQ0FBQztBQUMzTSxXQUFPLE1BQU0sVUFBVTtBQUN2QixXQUFPLE1BQU0sV0FBUztBQUN0QixXQUFPLE1BQU0sU0FBUztBQUN0QixXQUFPLE1BQU0sUUFBUTtBQUNyQixVQUFNLFlBQVksWUFBWSxTQUFTLFVBQVUsRUFBRSxNQUFNLGVBQUssQ0FBQztBQUMvRCxjQUFVLGlCQUFpQixTQUFTLFdBQVk7QUFDNUMsVUFBSSxPQUFPLGdCQUFnQixNQUFNO0FBQzdCLGtCQUFVLFVBQVUsVUFBVSxPQUFPLFdBQVcsRUFBRSxLQUFLLFdBQVk7QUFDL0QsY0FBSSx1QkFBTyxnQ0FBTztBQUFBLFFBQ3RCLEdBQUcsU0FBVSxLQUFLO0FBQ2QsY0FBSSx1QkFBTyw4QkFBVSxHQUFHO0FBQUEsUUFDNUIsQ0FBQztBQUFBLE1BQ0w7QUFBQSxJQUNKLENBQUM7QUFDRCxnQkFBWSxTQUFTLElBQUk7QUFDekIsVUFBTSxJQUFJLFlBQVksU0FBUyxLQUFLO0FBQUEsTUFDaEMsTUFBTTtBQUFBLE1BQ04sTUFBTTtBQUFBLElBQ1YsQ0FBQztBQUNELE1BQUUsTUFBTSxXQUFXO0FBQUEsRUFDdkI7QUFDSjs7O0FDN0ZBLElBQUFDLG1CQUFvRTtBQUk3RCxJQUFNLGVBQU4sTUFBbUI7QUFBQSxFQVN0QixZQUFZLGtCQUEwQixLQUFVLFFBQXVCLFVBQXdCLFFBQWdCLElBQWlCLEtBQW1DO0FBQy9KLFNBQUssTUFBTTtBQUNYLFNBQUssU0FBUztBQUNkLFNBQUssV0FBVztBQUNoQixTQUFLLG1CQUFtQjtBQUN4QixTQUFLLFNBQVM7QUFDZCxTQUFLLEtBQUs7QUFDVixTQUFLLE1BQU07QUFDWCxTQUFLLE9BQU87QUFBQSxFQUNoQjtBQUFBLEVBQ0EsTUFBTSxTQUFTO0FBQ1gsVUFBTSxNQUFNLFNBQVMsY0FBYyxLQUFLO0FBQ3hDLFFBQUksWUFBWTtBQUNoQixVQUFNLFFBQTZCLENBQUM7QUFDcEMsVUFBTSxVQUFVLFNBQVMsY0FBYyxLQUFLO0FBQzVDLFVBQU0sTUFBTSxTQUFTLGNBQWMsS0FBSztBQUN4QyxRQUFJLFlBQVk7QUFDaEIsWUFBUSxNQUFNLFVBQVU7QUFDeEIsWUFBUSxNQUFNLGdCQUFnQjtBQUM5QixRQUFJLEtBQUssaUJBQWlCLE1BQU0sSUFBSSxFQUFFLENBQUMsR0FBRztBQUN0QyxZQUFNLFVBQVU7QUFDaEIsVUFBSTtBQUNKLFlBQU0saUJBQWlCLENBQUM7QUFDeEIsY0FBUSxRQUFRLFFBQVEsS0FBSyxLQUFLLGlCQUFpQixNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxNQUFNO0FBQzFFLHVCQUFlLEtBQUssTUFBTSxDQUFDLENBQUM7QUFBQSxNQUNoQztBQUNBLFlBQU0sYUFBK0IsQ0FBQztBQUN0QyxlQUFTLElBQUksR0FBRyxJQUFJLGVBQWUsUUFBUSxLQUFLO0FBQzVDLGNBQU0sQ0FBQyxJQUFJLFNBQVMsY0FBYyxRQUFRO0FBQzFDLGNBQU0sQ0FBQyxFQUFFLGNBQWMsZUFBZSxDQUFDO0FBQ3ZDLGNBQU0sQ0FBQyxFQUFFLFlBQVk7QUFDckIsWUFBSSxNQUFNO0FBQ04sZ0JBQU0sQ0FBQyxFQUFFLFVBQVUsSUFBSSxRQUFRO0FBSW5DLGNBQU0sQ0FBQyxFQUFFLGlCQUFpQixTQUFTLE1BQU07QUFFckMsbUJBQVMsSUFBSSxHQUFHLElBQUksTUFBTSxRQUFRLEtBQUs7QUFDbkMsa0JBQU0sQ0FBQyxFQUFFLFVBQVUsT0FBTyxRQUFRO0FBQUEsVUFDdEM7QUFDQSxnQkFBTSxDQUFDLEVBQUUsVUFBVSxJQUFJLFFBQVE7QUFDL0IsbUJBQVMsSUFBSSxHQUFHLElBQUksV0FBVyxRQUFRLEtBQUs7QUFDeEMsZ0JBQUksTUFBTSxHQUFHO0FBQ1QseUJBQVcsQ0FBQyxFQUFFLE1BQU0sVUFBVTtBQUFBLFlBQ2xDLE9BQU87QUFDSCx5QkFBVyxDQUFDLEVBQUUsTUFBTSxVQUFVO0FBQUEsWUFDbEM7QUFBQSxVQUNKO0FBQUEsUUFDSixDQUFDO0FBQ0QsWUFBSSxZQUFZLE1BQU0sQ0FBQyxDQUFDO0FBQUEsTUFDNUI7QUFFQSxZQUFNLHFCQUFxQixLQUFLLGlCQUFpQixNQUFNLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxLQUFLLElBQUk7QUFHL0UsVUFBSSxZQUFZO0FBQ2hCLFVBQUksS0FBSyxpQkFBaUIsTUFBTSxJQUFJLEVBQUUsQ0FBQyxHQUFHO0FBQ3RDLFlBQUksS0FBSyxpQkFBaUIsTUFBTSxJQUFJLEVBQUUsQ0FBQyxLQUFLLE9BQU87QUFDL0Msc0JBQVk7QUFBQSxRQUNoQixXQUFXLEtBQUssaUJBQWlCLE1BQU0sSUFBSSxFQUFFLENBQUMsS0FBSyxPQUFPO0FBQ3RELHNCQUFZO0FBQUEsUUFDaEIsV0FBVyxLQUFLLGlCQUFpQixNQUFNLElBQUksRUFBRSxDQUFDLEtBQUssT0FBTztBQUN0RCxzQkFBWTtBQUFBLFFBQ2hCO0FBQUEsTUFDSjtBQUNBLFlBQU0sUUFBUSxJQUFJLE9BQU8sT0FBTyxlQUFlO0FBQy9DLFlBQU0sYUFBYSxtQkFBbUIsTUFBTSxLQUFLO0FBQ2pELGVBQVMsSUFBSSxHQUFHLElBQUksV0FBVyxRQUFRLEtBQUs7QUFDeEMsWUFBSSxLQUFLLEdBQUc7QUFDUixnQkFBTSxZQUFZLFNBQVMsY0FBYyxLQUFLO0FBQzlDLGNBQUksS0FBSyxHQUFHO0FBQ1Isc0JBQVUsTUFBTSxVQUFVO0FBQUEsVUFDOUI7QUFDQSxvQkFBVSxZQUFZO0FBQ3RCLGdCQUFNLGtDQUFpQixPQUFPLEtBQUssS0FBSyxXQUFXLENBQUMsR0FBRyxXQUFXLEtBQUssSUFBSSxZQUFZLEtBQUssTUFBTTtBQUNsRyxrQkFBUSxZQUFZLFNBQVM7QUFDN0IscUJBQVcsS0FBSyxTQUFTO0FBQUEsUUFDN0I7QUFBQSxNQUNKO0FBQ0EsVUFBSSxZQUFZLEdBQUc7QUFBQSxJQUN2QjtBQUNBLFFBQUksWUFBWSxPQUFPO0FBRXZCLFNBQUssR0FBRyxZQUFZLEdBQUc7QUFBQSxFQUUzQjtBQUNKOzs7QUNwR0EsSUFBQUMsbUJBQW9FO0FBRzdELElBQU0scUJBQU4sTUFBeUI7QUFBQSxFQVE1QixZQUFZLGtCQUEwQixLQUFVLFFBQXVCLFVBQXdCLFFBQWdCLElBQWlCLEtBQW1DO0FBQy9KLFNBQUssTUFBTTtBQUNYLFNBQUssU0FBUztBQUNkLFNBQUssV0FBVztBQUNoQixTQUFLLG1CQUFtQjtBQUN4QixTQUFLLFNBQVM7QUFDZCxTQUFLLEtBQUs7QUFDVixTQUFLLE1BQU07QUFDWCxTQUFLLE9BQU87QUFBQSxFQUNoQjtBQUFBLEVBQ0EsTUFBTSxTQUFTO0FBQ1gsVUFBTSxNQUFNLFNBQVMsY0FBYyxLQUFLO0FBQ3hDLFFBQUksWUFBWTtBQUNoQixVQUFNLFFBQTZCLENBQUM7QUFDcEMsVUFBTSxVQUFVLFNBQVMsY0FBYyxLQUFLO0FBQzVDLFVBQU0sTUFBTSxTQUFTLGNBQWMsS0FBSztBQUN4QyxRQUFJLFlBQVk7QUFDaEIsWUFBUSxNQUFNLFVBQVU7QUFDeEIsWUFBUSxNQUFNLGdCQUFnQjtBQUM5QixRQUFJLEtBQUssaUJBQWlCLE1BQU0sSUFBSSxFQUFFLENBQUMsR0FBRztBQUN0QyxZQUFNLFVBQVU7QUFDaEIsVUFBSTtBQUNKLFlBQU0saUJBQWlCLENBQUM7QUFDeEIsY0FBUSxRQUFRLFFBQVEsS0FBSyxLQUFLLGlCQUFpQixNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxNQUFNO0FBQzFFLHVCQUFlLEtBQUssTUFBTSxDQUFDLENBQUM7QUFBQSxNQUNoQztBQUNBLFlBQU0sYUFBK0IsQ0FBQztBQUN0QyxlQUFTLElBQUksR0FBRyxJQUFJLGVBQWUsUUFBUSxLQUFLO0FBQzVDLGNBQU0sQ0FBQyxJQUFJLFNBQVMsY0FBYyxRQUFRO0FBQzFDLGNBQU0sQ0FBQyxFQUFFLGNBQWMsZUFBZSxDQUFDO0FBQ3ZDLGNBQU0sQ0FBQyxFQUFFLFlBQVk7QUFDckIsWUFBSSxNQUFNO0FBQ04sZ0JBQU0sQ0FBQyxFQUFFLFVBQVUsSUFBSSxRQUFRO0FBQ25DLGNBQU0sQ0FBQyxFQUFFLGlCQUFpQixTQUFTLE1BQU07QUFDckMsbUJBQVMsSUFBSSxHQUFHLElBQUksTUFBTSxRQUFRLEtBQUs7QUFDbkMsa0JBQU0sQ0FBQyxFQUFFLFVBQVUsT0FBTyxRQUFRO0FBQUEsVUFDdEM7QUFDQSxnQkFBTSxDQUFDLEVBQUUsVUFBVSxJQUFJLFFBQVE7QUFDL0IsbUJBQVMsSUFBSSxHQUFHLElBQUksV0FBVyxRQUFRLEtBQUs7QUFDeEMsZ0JBQUksTUFBTSxHQUFHO0FBQ1QseUJBQVcsQ0FBQyxFQUFFLE1BQU0sVUFBVTtBQUFBLFlBQ2xDLE9BQU87QUFDSCx5QkFBVyxDQUFDLEVBQUUsTUFBTSxVQUFVO0FBQUEsWUFDbEM7QUFBQSxVQUNKO0FBQUEsUUFDSixDQUFDO0FBQ0QsWUFBSSxZQUFZLE1BQU0sQ0FBQyxDQUFDO0FBQUEsTUFDNUI7QUFDQSxZQUFNLHFCQUFxQixLQUFLLGlCQUFpQixNQUFNLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxLQUFLLElBQUk7QUFDL0UsVUFBSSxZQUFZO0FBQ2hCLFVBQUksS0FBSyxpQkFBaUIsTUFBTSxJQUFJLEVBQUUsQ0FBQyxHQUFHO0FBQ3RDLFlBQUksS0FBSyxpQkFBaUIsTUFBTSxJQUFJLEVBQUUsQ0FBQyxLQUFLLE9BQU87QUFDL0Msc0JBQVk7QUFBQSxRQUNoQixXQUFXLEtBQUssaUJBQWlCLE1BQU0sSUFBSSxFQUFFLENBQUMsS0FBSyxPQUFPO0FBQ3RELHNCQUFZO0FBQUEsUUFDaEIsV0FBVyxLQUFLLGlCQUFpQixNQUFNLElBQUksRUFBRSxDQUFDLEtBQUssT0FBTztBQUN0RCxzQkFBWTtBQUFBLFFBQ2hCO0FBQUEsTUFDSjtBQUNBLFlBQU0sUUFBUSxJQUFJLE9BQU8sT0FBTyxlQUFlO0FBQy9DLFlBQU0sYUFBYSxtQkFBbUIsTUFBTSxLQUFLO0FBQ2pELGVBQVMsSUFBSSxHQUFHLElBQUksV0FBVyxRQUFRLEtBQUs7QUFDeEMsWUFBSSxLQUFLLEdBQUc7QUFDUixnQkFBTSxZQUFZLFNBQVMsY0FBYyxLQUFLO0FBQzlDLGNBQUksS0FBSyxHQUFHO0FBQ1Isc0JBQVUsTUFBTSxVQUFVO0FBQUEsVUFDOUI7QUFDQSxvQkFBVSxZQUFZO0FBQ3RCLGdCQUFNLGtDQUFpQixPQUFPLEtBQUssS0FBSyxXQUFXLENBQUMsR0FBRyxXQUFXLEtBQUssSUFBSSxZQUFZLEtBQUssTUFBTTtBQUNsRyxrQkFBUSxZQUFZLFNBQVM7QUFDN0IscUJBQVcsS0FBSyxTQUFTO0FBQUEsUUFDN0I7QUFBQSxNQUNKO0FBQ0EsVUFBSSxZQUFZLE9BQU87QUFBQSxJQUMzQjtBQUNBLFFBQUksWUFBWSxHQUFHO0FBRW5CLFNBQUssR0FBRyxZQUFZLEdBQUc7QUFBQSxFQUUzQjtBQUNKOzs7QUMzRkEsSUFBQUMsbUJBQW9FO0FBRzdELElBQU0sdUJBQU4sTUFBMkI7QUFBQSxFQVE5QixZQUFZLGtCQUEwQixLQUFVLFFBQXVCLFVBQXdCLFFBQWdCLElBQWlCLEtBQW1DO0FBQy9KLFNBQUssTUFBTTtBQUNYLFNBQUssU0FBUztBQUNkLFNBQUssV0FBVztBQUNoQixTQUFLLG1CQUFtQjtBQUN4QixTQUFLLFNBQVM7QUFDZCxTQUFLLEtBQUs7QUFDVixTQUFLLE1BQU07QUFDWCxTQUFLLE9BQU87QUFBQSxFQUNoQjtBQUFBLEVBQ0EsTUFBTSxTQUFTO0FBQ1gsVUFBTSxNQUFNLFNBQVMsY0FBYyxLQUFLO0FBQ3hDLFFBQUksWUFBWTtBQUNoQixRQUFJLEtBQUssaUJBQWlCLE1BQU0sSUFBSSxFQUFFLENBQUMsR0FBRztBQUN0QyxZQUFNLHFCQUFxQixLQUFLLGlCQUFpQixNQUFNLElBQUksRUFBRSxNQUFNLENBQUMsRUFBRSxLQUFLLElBQUk7QUFDL0UsVUFBSSxZQUFZO0FBQ2hCLFVBQUksS0FBSyxpQkFBaUIsTUFBTSxJQUFJLEVBQUUsQ0FBQyxHQUFHO0FBQ3RDLFlBQUksS0FBSyxpQkFBaUIsTUFBTSxJQUFJLEVBQUUsQ0FBQyxLQUFLLE9BQU87QUFDL0Msc0JBQVk7QUFBQSxRQUNoQixXQUFXLEtBQUssaUJBQWlCLE1BQU0sSUFBSSxFQUFFLENBQUMsS0FBSyxPQUFPO0FBQ3RELHNCQUFZO0FBQUEsUUFDaEIsV0FBVyxLQUFLLGlCQUFpQixNQUFNLElBQUksRUFBRSxDQUFDLEtBQUssT0FBTztBQUN0RCxzQkFBWTtBQUFBLFFBQ2hCO0FBQUEsTUFDSjtBQUNBLFlBQU0sUUFBUSxJQUFJLE9BQU8sT0FBTyxlQUFlO0FBQy9DLFlBQU0sYUFBYSxtQkFBbUIsTUFBTSxLQUFLO0FBQ2pELGVBQVMsSUFBSSxHQUFHLElBQUksV0FBVyxRQUFRLEtBQUs7QUFDcEMsY0FBTSxZQUFZLFNBQVMsY0FBYyxLQUFLO0FBQzlDLGtCQUFVLFlBQVk7QUFDdEIsY0FBTSxrQ0FBaUIsT0FBTyxLQUFLLEtBQUssV0FBVyxDQUFDLEdBQUcsV0FBVyxLQUFLLElBQUksWUFBWSxLQUFLLE1BQU07QUFDbEcsWUFBSSxZQUFZLFNBQVM7QUFBQSxNQUVqQztBQUFBLElBQ0o7QUFDQSxTQUFLLEdBQUcsWUFBWSxHQUFHO0FBQUEsRUFFM0I7QUFDSjs7O0FDMUNPLElBQU0scUJBQU4sTUFBeUI7QUFBQSxFQUk1QixZQUFZLEtBQVUsUUFBdUIsVUFBd0I7QUFDakUsU0FBSyxNQUFNO0FBQ1gsU0FBSyxTQUFTO0FBQ2QsU0FBSyxXQUFXO0FBQ2hCLFNBQUssYUFBYTtBQUNsQixTQUFLLE9BQU8sbUNBQW1DLFlBQVksS0FBSyx1QkFBdUIsS0FBSyxJQUFJLENBQUM7QUFBQSxFQUNyRztBQUFBLEVBR0EsTUFBTSx1QkFDRixRQUNBLElBQ0EsS0FDYTtBQUdiLFVBQU0seUJBQXlCLE9BQU8sS0FBSztBQUMzQyxVQUFNLFFBQVEsdUJBQXVCLE1BQU0sSUFBSTtBQUMvQyxVQUFNLG1CQUFtQixNQUFNLE9BQU8sVUFBUTtBQUUxQyxZQUFNLGNBQWMsS0FBSyxLQUFLO0FBRTlCLGFBQU8sQ0FBQyxZQUFZLFdBQVcsSUFBSTtBQUFBLElBQ3ZDLENBQUMsRUFBRSxLQUFLLElBQUk7QUFJWixRQUFJLGlCQUFpQixNQUFNLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxNQUFNLFFBQVE7QUFDbkQsVUFBSSxhQUFhLGtCQUFrQixLQUFLLEtBQUssS0FBSyxRQUFRLEtBQUssVUFBVSxRQUFRLElBQUksR0FBRztBQUFBLElBQzVGO0FBQ0EsUUFBSSxpQkFBaUIsTUFBTSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssTUFBTSxjQUFjO0FBQ3pELFVBQUksbUJBQW1CLGtCQUFrQixLQUFLLEtBQUssS0FBSyxRQUFRLEtBQUssVUFBVSxRQUFRLElBQUksR0FBRztBQUFBLElBQ2xHO0FBQ0EsUUFBSSxpQkFBaUIsTUFBTSxJQUFJLEVBQUUsQ0FBQyxFQUFFLEtBQUssTUFBTSxnQkFBZ0I7QUFDM0QsVUFBSSxxQkFBcUIsa0JBQWtCLEtBQUssS0FBSyxLQUFLLFFBQVEsS0FBSyxVQUFVLFFBQVEsSUFBSSxHQUFHO0FBQUEsSUFDcEc7QUFBQSxFQUNKO0FBQUE7QUFBQSxFQUdBLE1BQU0sZUFBZTtBQUNqQixTQUFLLFdBQVcsT0FBTyxPQUFPLENBQUMsR0FBRyxrQkFBa0IsTUFBTSxLQUFLLE9BQU8sU0FBUyxDQUFDO0FBQUEsRUFDcEY7QUFBQTtBQUFBLEVBRUEsTUFBTSxlQUFlO0FBQ2pCLFVBQU0sS0FBSyxPQUFPLFNBQVMsS0FBSyxRQUFRO0FBQUEsRUFDNUM7QUFDSjs7O0FML0NPLElBQU0sbUJBQWlDO0FBQUEsRUFDN0MsVUFBVTtBQUNYO0FBRUEsSUFBcUIsYUFBckIsY0FBd0Msd0JBQU87QUFBQSxFQUU5QyxNQUFNLFNBQVM7QUFDZCxVQUFNLEtBQUssYUFBYTtBQUN4QixTQUFLLGNBQWMsSUFBSSxXQUFXLEtBQUssS0FBSyxJQUFJLENBQUM7QUFFakQsUUFBSSxtQkFBbUIsS0FBSyxLQUFLLE1BQU0sS0FBSyxRQUFRO0FBQ3BELFNBQUssaUJBQWlCLFVBQVUsU0FBUyxDQUFDLFFBQW9CO0FBQUEsSUFFOUQsQ0FBQztBQUFBLEVBRUY7QUFBQSxFQUNBLFdBQVc7QUFBQSxFQUVYO0FBQUEsRUFDQSxNQUFNLGVBQWU7QUFDcEIsU0FBSyxXQUFXLE9BQU8sT0FBTyxDQUFDLEdBQUcsa0JBQWtCLE1BQU0sS0FBSyxTQUFTLENBQUM7QUFBQSxFQUMxRTtBQUFBLEVBQ0EsTUFBTSxlQUFlO0FBQ3BCLFVBQU0sS0FBSyxTQUFTLEtBQUssUUFBUTtBQUFBLEVBQ2xDO0FBQ0Q7IiwKICAibmFtZXMiOiBbImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiJdCn0K
